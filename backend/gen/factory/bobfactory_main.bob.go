// Code generated by BobGen psql v0.41.1. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package factory

import (
	"context"
	"time"

	"github.com/aarondl/opt/null"
	"github.com/shopspring/decimal"
	models "iiot_system/backend/gen/models"
)

type Factory struct {
	baseIotAlertEventMods      IotAlertEventModSlice
	baseIotProductionEventMods IotProductionEventModSlice
	baseIotStatusEventMods     IotStatusEventModSlice
	baseIotTelemetryEventMods  IotTelemetryEventModSlice
	baseSchemaMigrationMods    SchemaMigrationModSlice
}

func New() *Factory {
	return &Factory{}
}

func (f *Factory) NewIotAlertEvent(mods ...IotAlertEventMod) *IotAlertEventTemplate {
	return f.NewIotAlertEventWithContext(context.Background(), mods...)
}

func (f *Factory) NewIotAlertEventWithContext(ctx context.Context, mods ...IotAlertEventMod) *IotAlertEventTemplate {
	o := &IotAlertEventTemplate{f: f}

	if f != nil {
		f.baseIotAlertEventMods.Apply(ctx, o)
	}

	IotAlertEventModSlice(mods).Apply(ctx, o)

	return o
}

func (f *Factory) FromExistingIotAlertEvent(m *models.IotAlertEvent) *IotAlertEventTemplate {
	o := &IotAlertEventTemplate{f: f, alreadyPersisted: true}

	o.Time = func() time.Time { return m.Time }
	o.DeviceID = func() string { return m.DeviceID }
	o.AlertType = func() string { return m.AlertType }
	o.Severity = func() string { return m.Severity }
	o.Message = func() string { return m.Message }
	o.CurrentValue = func() null.Val[decimal.Decimal] { return m.CurrentValue }

	return o
}

func (f *Factory) NewIotProductionEvent(mods ...IotProductionEventMod) *IotProductionEventTemplate {
	return f.NewIotProductionEventWithContext(context.Background(), mods...)
}

func (f *Factory) NewIotProductionEventWithContext(ctx context.Context, mods ...IotProductionEventMod) *IotProductionEventTemplate {
	o := &IotProductionEventTemplate{f: f}

	if f != nil {
		f.baseIotProductionEventMods.Apply(ctx, o)
	}

	IotProductionEventModSlice(mods).Apply(ctx, o)

	return o
}

func (f *Factory) FromExistingIotProductionEvent(m *models.IotProductionEvent) *IotProductionEventTemplate {
	o := &IotProductionEventTemplate{f: f, alreadyPersisted: true}

	o.Time = func() time.Time { return m.Time }
	o.DeviceID = func() string { return m.DeviceID }
	o.ProductionType = func() string { return m.ProductionType }
	o.ProductSku = func() string { return m.ProductSku }
	o.UnitCount = func() int32 { return m.UnitCount }
	o.BatchID = func() string { return m.BatchID }
	o.QualityStatus = func() string { return m.QualityStatus }

	return o
}

func (f *Factory) NewIotStatusEvent(mods ...IotStatusEventMod) *IotStatusEventTemplate {
	return f.NewIotStatusEventWithContext(context.Background(), mods...)
}

func (f *Factory) NewIotStatusEventWithContext(ctx context.Context, mods ...IotStatusEventMod) *IotStatusEventTemplate {
	o := &IotStatusEventTemplate{f: f}

	if f != nil {
		f.baseIotStatusEventMods.Apply(ctx, o)
	}

	IotStatusEventModSlice(mods).Apply(ctx, o)

	return o
}

func (f *Factory) FromExistingIotStatusEvent(m *models.IotStatusEvent) *IotStatusEventTemplate {
	o := &IotStatusEventTemplate{f: f, alreadyPersisted: true}

	o.Time = func() time.Time { return m.Time }
	o.DeviceID = func() string { return m.DeviceID }
	o.OldStatus = func() string { return m.OldStatus }
	o.NewStatus = func() string { return m.NewStatus }
	o.Reason = func() string { return m.Reason }

	return o
}

func (f *Factory) NewIotTelemetryEvent(mods ...IotTelemetryEventMod) *IotTelemetryEventTemplate {
	return f.NewIotTelemetryEventWithContext(context.Background(), mods...)
}

func (f *Factory) NewIotTelemetryEventWithContext(ctx context.Context, mods ...IotTelemetryEventMod) *IotTelemetryEventTemplate {
	o := &IotTelemetryEventTemplate{f: f}

	if f != nil {
		f.baseIotTelemetryEventMods.Apply(ctx, o)
	}

	IotTelemetryEventModSlice(mods).Apply(ctx, o)

	return o
}

func (f *Factory) FromExistingIotTelemetryEvent(m *models.IotTelemetryEvent) *IotTelemetryEventTemplate {
	o := &IotTelemetryEventTemplate{f: f, alreadyPersisted: true}

	o.Time = func() time.Time { return m.Time }
	o.DeviceID = func() string { return m.DeviceID }
	o.TemperatureCelcius = func() decimal.Decimal { return m.TemperatureCelcius }
	o.HumidityPercent = func() decimal.Decimal { return m.HumidityPercent }
	o.VibrationHZ = func() decimal.Decimal { return m.VibrationHZ }
	o.MotorRPM = func() int32 { return m.MotorRPM }
	o.CurrentAmps = func() decimal.Decimal { return m.CurrentAmps }
	o.MachineStatus = func() string { return m.MachineStatus }
	o.ErrorCode = func() null.Val[string] { return m.ErrorCode }

	return o
}

func (f *Factory) NewSchemaMigration(mods ...SchemaMigrationMod) *SchemaMigrationTemplate {
	return f.NewSchemaMigrationWithContext(context.Background(), mods...)
}

func (f *Factory) NewSchemaMigrationWithContext(ctx context.Context, mods ...SchemaMigrationMod) *SchemaMigrationTemplate {
	o := &SchemaMigrationTemplate{f: f}

	if f != nil {
		f.baseSchemaMigrationMods.Apply(ctx, o)
	}

	SchemaMigrationModSlice(mods).Apply(ctx, o)

	return o
}

func (f *Factory) FromExistingSchemaMigration(m *models.SchemaMigration) *SchemaMigrationTemplate {
	o := &SchemaMigrationTemplate{f: f, alreadyPersisted: true}

	o.Version = func() string { return m.Version }

	return o
}

func (f *Factory) ClearBaseIotAlertEventMods() {
	f.baseIotAlertEventMods = nil
}

func (f *Factory) AddBaseIotAlertEventMod(mods ...IotAlertEventMod) {
	f.baseIotAlertEventMods = append(f.baseIotAlertEventMods, mods...)
}

func (f *Factory) ClearBaseIotProductionEventMods() {
	f.baseIotProductionEventMods = nil
}

func (f *Factory) AddBaseIotProductionEventMod(mods ...IotProductionEventMod) {
	f.baseIotProductionEventMods = append(f.baseIotProductionEventMods, mods...)
}

func (f *Factory) ClearBaseIotStatusEventMods() {
	f.baseIotStatusEventMods = nil
}

func (f *Factory) AddBaseIotStatusEventMod(mods ...IotStatusEventMod) {
	f.baseIotStatusEventMods = append(f.baseIotStatusEventMods, mods...)
}

func (f *Factory) ClearBaseIotTelemetryEventMods() {
	f.baseIotTelemetryEventMods = nil
}

func (f *Factory) AddBaseIotTelemetryEventMod(mods ...IotTelemetryEventMod) {
	f.baseIotTelemetryEventMods = append(f.baseIotTelemetryEventMods, mods...)
}

func (f *Factory) ClearBaseSchemaMigrationMods() {
	f.baseSchemaMigrationMods = nil
}

func (f *Factory) AddBaseSchemaMigrationMod(mods ...SchemaMigrationMod) {
	f.baseSchemaMigrationMods = append(f.baseSchemaMigrationMods, mods...)
}
