// Code generated by BobGen psql v0.41.1. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package factory

import (
	"context"
	"time"

	"github.com/jaswdr/faker/v2"
	models "iiot_system/backend/gen/models"
)

type IotStatusEventMod interface {
	Apply(context.Context, *IotStatusEventTemplate)
}

type IotStatusEventModFunc func(context.Context, *IotStatusEventTemplate)

func (f IotStatusEventModFunc) Apply(ctx context.Context, n *IotStatusEventTemplate) {
	f(ctx, n)
}

type IotStatusEventModSlice []IotStatusEventMod

func (mods IotStatusEventModSlice) Apply(ctx context.Context, n *IotStatusEventTemplate) {
	for _, f := range mods {
		f.Apply(ctx, n)
	}
}

// IotStatusEventTemplate is an object representing the database table.
// all columns are optional and should be set by mods
type IotStatusEventTemplate struct {
	Time      func() time.Time
	DeviceID  func() string
	OldStatus func() string
	NewStatus func() string
	Reason    func() string

	f *Factory

	alreadyPersisted bool
}

// Apply mods to the IotStatusEventTemplate
func (o *IotStatusEventTemplate) Apply(ctx context.Context, mods ...IotStatusEventMod) {
	for _, mod := range mods {
		mod.Apply(ctx, o)
	}
}

// setModelRels creates and sets the relationships on *models.IotStatusEvent
// according to the relationships in the template. Nothing is inserted into the db
func (t IotStatusEventTemplate) setModelRels(o *models.IotStatusEvent) {}

// Build returns an *models.IotStatusEvent
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use IotStatusEventTemplate.Create
func (o IotStatusEventTemplate) Build() *models.IotStatusEvent {
	m := &models.IotStatusEvent{}

	if o.Time != nil {
		m.Time = o.Time()
	}
	if o.DeviceID != nil {
		m.DeviceID = o.DeviceID()
	}
	if o.OldStatus != nil {
		m.OldStatus = o.OldStatus()
	}
	if o.NewStatus != nil {
		m.NewStatus = o.NewStatus()
	}
	if o.Reason != nil {
		m.Reason = o.Reason()
	}

	o.setModelRels(m)

	return m
}

// BuildMany returns an models.IotStatusEventSlice
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use IotStatusEventTemplate.CreateMany
func (o IotStatusEventTemplate) BuildMany(number int) models.IotStatusEventSlice {
	m := make(models.IotStatusEventSlice, number)

	for i := range m {
		m[i] = o.Build()
	}

	return m
}

// IotStatusEvent has methods that act as mods for the IotStatusEventTemplate
var IotStatusEventMods iotStatusEventMods

type iotStatusEventMods struct{}

func (m iotStatusEventMods) RandomizeAllColumns(f *faker.Faker) IotStatusEventMod {
	return IotStatusEventModSlice{
		IotStatusEventMods.RandomTime(f),
		IotStatusEventMods.RandomDeviceID(f),
		IotStatusEventMods.RandomOldStatus(f),
		IotStatusEventMods.RandomNewStatus(f),
		IotStatusEventMods.RandomReason(f),
	}
}

// Set the model columns to this value
func (m iotStatusEventMods) Time(val time.Time) IotStatusEventMod {
	return IotStatusEventModFunc(func(_ context.Context, o *IotStatusEventTemplate) {
		o.Time = func() time.Time { return val }
	})
}

// Set the Column from the function
func (m iotStatusEventMods) TimeFunc(f func() time.Time) IotStatusEventMod {
	return IotStatusEventModFunc(func(_ context.Context, o *IotStatusEventTemplate) {
		o.Time = f
	})
}

// Clear any values for the column
func (m iotStatusEventMods) UnsetTime() IotStatusEventMod {
	return IotStatusEventModFunc(func(_ context.Context, o *IotStatusEventTemplate) {
		o.Time = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m iotStatusEventMods) RandomTime(f *faker.Faker) IotStatusEventMod {
	return IotStatusEventModFunc(func(_ context.Context, o *IotStatusEventTemplate) {
		o.Time = func() time.Time {
			return random_time_Time(f)
		}
	})
}

// Set the model columns to this value
func (m iotStatusEventMods) DeviceID(val string) IotStatusEventMod {
	return IotStatusEventModFunc(func(_ context.Context, o *IotStatusEventTemplate) {
		o.DeviceID = func() string { return val }
	})
}

// Set the Column from the function
func (m iotStatusEventMods) DeviceIDFunc(f func() string) IotStatusEventMod {
	return IotStatusEventModFunc(func(_ context.Context, o *IotStatusEventTemplate) {
		o.DeviceID = f
	})
}

// Clear any values for the column
func (m iotStatusEventMods) UnsetDeviceID() IotStatusEventMod {
	return IotStatusEventModFunc(func(_ context.Context, o *IotStatusEventTemplate) {
		o.DeviceID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m iotStatusEventMods) RandomDeviceID(f *faker.Faker) IotStatusEventMod {
	return IotStatusEventModFunc(func(_ context.Context, o *IotStatusEventTemplate) {
		o.DeviceID = func() string {
			return random_string(f, "50")
		}
	})
}

// Set the model columns to this value
func (m iotStatusEventMods) OldStatus(val string) IotStatusEventMod {
	return IotStatusEventModFunc(func(_ context.Context, o *IotStatusEventTemplate) {
		o.OldStatus = func() string { return val }
	})
}

// Set the Column from the function
func (m iotStatusEventMods) OldStatusFunc(f func() string) IotStatusEventMod {
	return IotStatusEventModFunc(func(_ context.Context, o *IotStatusEventTemplate) {
		o.OldStatus = f
	})
}

// Clear any values for the column
func (m iotStatusEventMods) UnsetOldStatus() IotStatusEventMod {
	return IotStatusEventModFunc(func(_ context.Context, o *IotStatusEventTemplate) {
		o.OldStatus = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m iotStatusEventMods) RandomOldStatus(f *faker.Faker) IotStatusEventMod {
	return IotStatusEventModFunc(func(_ context.Context, o *IotStatusEventTemplate) {
		o.OldStatus = func() string {
			return random_string(f, "20")
		}
	})
}

// Set the model columns to this value
func (m iotStatusEventMods) NewStatus(val string) IotStatusEventMod {
	return IotStatusEventModFunc(func(_ context.Context, o *IotStatusEventTemplate) {
		o.NewStatus = func() string { return val }
	})
}

// Set the Column from the function
func (m iotStatusEventMods) NewStatusFunc(f func() string) IotStatusEventMod {
	return IotStatusEventModFunc(func(_ context.Context, o *IotStatusEventTemplate) {
		o.NewStatus = f
	})
}

// Clear any values for the column
func (m iotStatusEventMods) UnsetNewStatus() IotStatusEventMod {
	return IotStatusEventModFunc(func(_ context.Context, o *IotStatusEventTemplate) {
		o.NewStatus = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m iotStatusEventMods) RandomNewStatus(f *faker.Faker) IotStatusEventMod {
	return IotStatusEventModFunc(func(_ context.Context, o *IotStatusEventTemplate) {
		o.NewStatus = func() string {
			return random_string(f, "20")
		}
	})
}

// Set the model columns to this value
func (m iotStatusEventMods) Reason(val string) IotStatusEventMod {
	return IotStatusEventModFunc(func(_ context.Context, o *IotStatusEventTemplate) {
		o.Reason = func() string { return val }
	})
}

// Set the Column from the function
func (m iotStatusEventMods) ReasonFunc(f func() string) IotStatusEventMod {
	return IotStatusEventModFunc(func(_ context.Context, o *IotStatusEventTemplate) {
		o.Reason = f
	})
}

// Clear any values for the column
func (m iotStatusEventMods) UnsetReason() IotStatusEventMod {
	return IotStatusEventModFunc(func(_ context.Context, o *IotStatusEventTemplate) {
		o.Reason = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m iotStatusEventMods) RandomReason(f *faker.Faker) IotStatusEventMod {
	return IotStatusEventModFunc(func(_ context.Context, o *IotStatusEventTemplate) {
		o.Reason = func() string {
			return random_string(f, "50")
		}
	})
}

func (m iotStatusEventMods) WithParentsCascading() IotStatusEventMod {
	return IotStatusEventModFunc(func(ctx context.Context, o *IotStatusEventTemplate) {
		if isDone, _ := iotStatusEventWithParentsCascadingCtx.Value(ctx); isDone {
			return
		}
		ctx = iotStatusEventWithParentsCascadingCtx.WithValue(ctx, true)
	})
}
