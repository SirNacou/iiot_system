// Code generated by BobGen psql v0.41.1. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package factory

import (
	"context"
	"time"

	"github.com/jaswdr/faker/v2"
	models "iiot_system/backend/gen/models"
)

type IotProductionEventMod interface {
	Apply(context.Context, *IotProductionEventTemplate)
}

type IotProductionEventModFunc func(context.Context, *IotProductionEventTemplate)

func (f IotProductionEventModFunc) Apply(ctx context.Context, n *IotProductionEventTemplate) {
	f(ctx, n)
}

type IotProductionEventModSlice []IotProductionEventMod

func (mods IotProductionEventModSlice) Apply(ctx context.Context, n *IotProductionEventTemplate) {
	for _, f := range mods {
		f.Apply(ctx, n)
	}
}

// IotProductionEventTemplate is an object representing the database table.
// all columns are optional and should be set by mods
type IotProductionEventTemplate struct {
	Time           func() time.Time
	DeviceID       func() string
	ProductionType func() string
	ProductSku     func() string
	UnitCount      func() int32
	BatchID        func() string
	QualityStatus  func() string

	f *Factory

	alreadyPersisted bool
}

// Apply mods to the IotProductionEventTemplate
func (o *IotProductionEventTemplate) Apply(ctx context.Context, mods ...IotProductionEventMod) {
	for _, mod := range mods {
		mod.Apply(ctx, o)
	}
}

// setModelRels creates and sets the relationships on *models.IotProductionEvent
// according to the relationships in the template. Nothing is inserted into the db
func (t IotProductionEventTemplate) setModelRels(o *models.IotProductionEvent) {}

// Build returns an *models.IotProductionEvent
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use IotProductionEventTemplate.Create
func (o IotProductionEventTemplate) Build() *models.IotProductionEvent {
	m := &models.IotProductionEvent{}

	if o.Time != nil {
		m.Time = o.Time()
	}
	if o.DeviceID != nil {
		m.DeviceID = o.DeviceID()
	}
	if o.ProductionType != nil {
		m.ProductionType = o.ProductionType()
	}
	if o.ProductSku != nil {
		m.ProductSku = o.ProductSku()
	}
	if o.UnitCount != nil {
		m.UnitCount = o.UnitCount()
	}
	if o.BatchID != nil {
		m.BatchID = o.BatchID()
	}
	if o.QualityStatus != nil {
		m.QualityStatus = o.QualityStatus()
	}

	o.setModelRels(m)

	return m
}

// BuildMany returns an models.IotProductionEventSlice
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use IotProductionEventTemplate.CreateMany
func (o IotProductionEventTemplate) BuildMany(number int) models.IotProductionEventSlice {
	m := make(models.IotProductionEventSlice, number)

	for i := range m {
		m[i] = o.Build()
	}

	return m
}

// IotProductionEvent has methods that act as mods for the IotProductionEventTemplate
var IotProductionEventMods iotProductionEventMods

type iotProductionEventMods struct{}

func (m iotProductionEventMods) RandomizeAllColumns(f *faker.Faker) IotProductionEventMod {
	return IotProductionEventModSlice{
		IotProductionEventMods.RandomTime(f),
		IotProductionEventMods.RandomDeviceID(f),
		IotProductionEventMods.RandomProductionType(f),
		IotProductionEventMods.RandomProductSku(f),
		IotProductionEventMods.RandomUnitCount(f),
		IotProductionEventMods.RandomBatchID(f),
		IotProductionEventMods.RandomQualityStatus(f),
	}
}

// Set the model columns to this value
func (m iotProductionEventMods) Time(val time.Time) IotProductionEventMod {
	return IotProductionEventModFunc(func(_ context.Context, o *IotProductionEventTemplate) {
		o.Time = func() time.Time { return val }
	})
}

// Set the Column from the function
func (m iotProductionEventMods) TimeFunc(f func() time.Time) IotProductionEventMod {
	return IotProductionEventModFunc(func(_ context.Context, o *IotProductionEventTemplate) {
		o.Time = f
	})
}

// Clear any values for the column
func (m iotProductionEventMods) UnsetTime() IotProductionEventMod {
	return IotProductionEventModFunc(func(_ context.Context, o *IotProductionEventTemplate) {
		o.Time = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m iotProductionEventMods) RandomTime(f *faker.Faker) IotProductionEventMod {
	return IotProductionEventModFunc(func(_ context.Context, o *IotProductionEventTemplate) {
		o.Time = func() time.Time {
			return random_time_Time(f)
		}
	})
}

// Set the model columns to this value
func (m iotProductionEventMods) DeviceID(val string) IotProductionEventMod {
	return IotProductionEventModFunc(func(_ context.Context, o *IotProductionEventTemplate) {
		o.DeviceID = func() string { return val }
	})
}

// Set the Column from the function
func (m iotProductionEventMods) DeviceIDFunc(f func() string) IotProductionEventMod {
	return IotProductionEventModFunc(func(_ context.Context, o *IotProductionEventTemplate) {
		o.DeviceID = f
	})
}

// Clear any values for the column
func (m iotProductionEventMods) UnsetDeviceID() IotProductionEventMod {
	return IotProductionEventModFunc(func(_ context.Context, o *IotProductionEventTemplate) {
		o.DeviceID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m iotProductionEventMods) RandomDeviceID(f *faker.Faker) IotProductionEventMod {
	return IotProductionEventModFunc(func(_ context.Context, o *IotProductionEventTemplate) {
		o.DeviceID = func() string {
			return random_string(f, "50")
		}
	})
}

// Set the model columns to this value
func (m iotProductionEventMods) ProductionType(val string) IotProductionEventMod {
	return IotProductionEventModFunc(func(_ context.Context, o *IotProductionEventTemplate) {
		o.ProductionType = func() string { return val }
	})
}

// Set the Column from the function
func (m iotProductionEventMods) ProductionTypeFunc(f func() string) IotProductionEventMod {
	return IotProductionEventModFunc(func(_ context.Context, o *IotProductionEventTemplate) {
		o.ProductionType = f
	})
}

// Clear any values for the column
func (m iotProductionEventMods) UnsetProductionType() IotProductionEventMod {
	return IotProductionEventModFunc(func(_ context.Context, o *IotProductionEventTemplate) {
		o.ProductionType = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m iotProductionEventMods) RandomProductionType(f *faker.Faker) IotProductionEventMod {
	return IotProductionEventModFunc(func(_ context.Context, o *IotProductionEventTemplate) {
		o.ProductionType = func() string {
			return random_string(f, "50")
		}
	})
}

// Set the model columns to this value
func (m iotProductionEventMods) ProductSku(val string) IotProductionEventMod {
	return IotProductionEventModFunc(func(_ context.Context, o *IotProductionEventTemplate) {
		o.ProductSku = func() string { return val }
	})
}

// Set the Column from the function
func (m iotProductionEventMods) ProductSkuFunc(f func() string) IotProductionEventMod {
	return IotProductionEventModFunc(func(_ context.Context, o *IotProductionEventTemplate) {
		o.ProductSku = f
	})
}

// Clear any values for the column
func (m iotProductionEventMods) UnsetProductSku() IotProductionEventMod {
	return IotProductionEventModFunc(func(_ context.Context, o *IotProductionEventTemplate) {
		o.ProductSku = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m iotProductionEventMods) RandomProductSku(f *faker.Faker) IotProductionEventMod {
	return IotProductionEventModFunc(func(_ context.Context, o *IotProductionEventTemplate) {
		o.ProductSku = func() string {
			return random_string(f, "50")
		}
	})
}

// Set the model columns to this value
func (m iotProductionEventMods) UnitCount(val int32) IotProductionEventMod {
	return IotProductionEventModFunc(func(_ context.Context, o *IotProductionEventTemplate) {
		o.UnitCount = func() int32 { return val }
	})
}

// Set the Column from the function
func (m iotProductionEventMods) UnitCountFunc(f func() int32) IotProductionEventMod {
	return IotProductionEventModFunc(func(_ context.Context, o *IotProductionEventTemplate) {
		o.UnitCount = f
	})
}

// Clear any values for the column
func (m iotProductionEventMods) UnsetUnitCount() IotProductionEventMod {
	return IotProductionEventModFunc(func(_ context.Context, o *IotProductionEventTemplate) {
		o.UnitCount = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m iotProductionEventMods) RandomUnitCount(f *faker.Faker) IotProductionEventMod {
	return IotProductionEventModFunc(func(_ context.Context, o *IotProductionEventTemplate) {
		o.UnitCount = func() int32 {
			return random_int32(f)
		}
	})
}

// Set the model columns to this value
func (m iotProductionEventMods) BatchID(val string) IotProductionEventMod {
	return IotProductionEventModFunc(func(_ context.Context, o *IotProductionEventTemplate) {
		o.BatchID = func() string { return val }
	})
}

// Set the Column from the function
func (m iotProductionEventMods) BatchIDFunc(f func() string) IotProductionEventMod {
	return IotProductionEventModFunc(func(_ context.Context, o *IotProductionEventTemplate) {
		o.BatchID = f
	})
}

// Clear any values for the column
func (m iotProductionEventMods) UnsetBatchID() IotProductionEventMod {
	return IotProductionEventModFunc(func(_ context.Context, o *IotProductionEventTemplate) {
		o.BatchID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m iotProductionEventMods) RandomBatchID(f *faker.Faker) IotProductionEventMod {
	return IotProductionEventModFunc(func(_ context.Context, o *IotProductionEventTemplate) {
		o.BatchID = func() string {
			return random_string(f, "50")
		}
	})
}

// Set the model columns to this value
func (m iotProductionEventMods) QualityStatus(val string) IotProductionEventMod {
	return IotProductionEventModFunc(func(_ context.Context, o *IotProductionEventTemplate) {
		o.QualityStatus = func() string { return val }
	})
}

// Set the Column from the function
func (m iotProductionEventMods) QualityStatusFunc(f func() string) IotProductionEventMod {
	return IotProductionEventModFunc(func(_ context.Context, o *IotProductionEventTemplate) {
		o.QualityStatus = f
	})
}

// Clear any values for the column
func (m iotProductionEventMods) UnsetQualityStatus() IotProductionEventMod {
	return IotProductionEventModFunc(func(_ context.Context, o *IotProductionEventTemplate) {
		o.QualityStatus = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m iotProductionEventMods) RandomQualityStatus(f *faker.Faker) IotProductionEventMod {
	return IotProductionEventModFunc(func(_ context.Context, o *IotProductionEventTemplate) {
		o.QualityStatus = func() string {
			return random_string(f, "50")
		}
	})
}

func (m iotProductionEventMods) WithParentsCascading() IotProductionEventMod {
	return IotProductionEventModFunc(func(ctx context.Context, o *IotProductionEventTemplate) {
		if isDone, _ := iotProductionEventWithParentsCascadingCtx.Value(ctx); isDone {
			return
		}
		ctx = iotProductionEventWithParentsCascadingCtx.WithValue(ctx, true)
	})
}
