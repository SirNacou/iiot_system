// Code generated by BobGen psql v0.41.1. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package factory

import (
	"context"
	"time"

	"github.com/aarondl/opt/null"
	"github.com/jaswdr/faker/v2"
	"github.com/shopspring/decimal"
	models "iiot_system/backend/gen/models"
)

type IotTelemetryEventMod interface {
	Apply(context.Context, *IotTelemetryEventTemplate)
}

type IotTelemetryEventModFunc func(context.Context, *IotTelemetryEventTemplate)

func (f IotTelemetryEventModFunc) Apply(ctx context.Context, n *IotTelemetryEventTemplate) {
	f(ctx, n)
}

type IotTelemetryEventModSlice []IotTelemetryEventMod

func (mods IotTelemetryEventModSlice) Apply(ctx context.Context, n *IotTelemetryEventTemplate) {
	for _, f := range mods {
		f.Apply(ctx, n)
	}
}

// IotTelemetryEventTemplate is an object representing the database table.
// all columns are optional and should be set by mods
type IotTelemetryEventTemplate struct {
	Time               func() time.Time
	DeviceID           func() string
	TemperatureCelcius func() decimal.Decimal
	HumidityPercent    func() decimal.Decimal
	VibrationHZ        func() decimal.Decimal
	MotorRPM           func() int32
	CurrentAmps        func() decimal.Decimal
	MachineStatus      func() string
	ErrorCode          func() null.Val[string]

	f *Factory

	alreadyPersisted bool
}

// Apply mods to the IotTelemetryEventTemplate
func (o *IotTelemetryEventTemplate) Apply(ctx context.Context, mods ...IotTelemetryEventMod) {
	for _, mod := range mods {
		mod.Apply(ctx, o)
	}
}

// setModelRels creates and sets the relationships on *models.IotTelemetryEvent
// according to the relationships in the template. Nothing is inserted into the db
func (t IotTelemetryEventTemplate) setModelRels(o *models.IotTelemetryEvent) {}

// Build returns an *models.IotTelemetryEvent
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use IotTelemetryEventTemplate.Create
func (o IotTelemetryEventTemplate) Build() *models.IotTelemetryEvent {
	m := &models.IotTelemetryEvent{}

	if o.Time != nil {
		m.Time = o.Time()
	}
	if o.DeviceID != nil {
		m.DeviceID = o.DeviceID()
	}
	if o.TemperatureCelcius != nil {
		m.TemperatureCelcius = o.TemperatureCelcius()
	}
	if o.HumidityPercent != nil {
		m.HumidityPercent = o.HumidityPercent()
	}
	if o.VibrationHZ != nil {
		m.VibrationHZ = o.VibrationHZ()
	}
	if o.MotorRPM != nil {
		m.MotorRPM = o.MotorRPM()
	}
	if o.CurrentAmps != nil {
		m.CurrentAmps = o.CurrentAmps()
	}
	if o.MachineStatus != nil {
		m.MachineStatus = o.MachineStatus()
	}
	if o.ErrorCode != nil {
		m.ErrorCode = o.ErrorCode()
	}

	o.setModelRels(m)

	return m
}

// BuildMany returns an models.IotTelemetryEventSlice
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use IotTelemetryEventTemplate.CreateMany
func (o IotTelemetryEventTemplate) BuildMany(number int) models.IotTelemetryEventSlice {
	m := make(models.IotTelemetryEventSlice, number)

	for i := range m {
		m[i] = o.Build()
	}

	return m
}

// IotTelemetryEvent has methods that act as mods for the IotTelemetryEventTemplate
var IotTelemetryEventMods iotTelemetryEventMods

type iotTelemetryEventMods struct{}

func (m iotTelemetryEventMods) RandomizeAllColumns(f *faker.Faker) IotTelemetryEventMod {
	return IotTelemetryEventModSlice{
		IotTelemetryEventMods.RandomTime(f),
		IotTelemetryEventMods.RandomDeviceID(f),
		IotTelemetryEventMods.RandomTemperatureCelcius(f),
		IotTelemetryEventMods.RandomHumidityPercent(f),
		IotTelemetryEventMods.RandomVibrationHZ(f),
		IotTelemetryEventMods.RandomMotorRPM(f),
		IotTelemetryEventMods.RandomCurrentAmps(f),
		IotTelemetryEventMods.RandomMachineStatus(f),
		IotTelemetryEventMods.RandomErrorCode(f),
	}
}

// Set the model columns to this value
func (m iotTelemetryEventMods) Time(val time.Time) IotTelemetryEventMod {
	return IotTelemetryEventModFunc(func(_ context.Context, o *IotTelemetryEventTemplate) {
		o.Time = func() time.Time { return val }
	})
}

// Set the Column from the function
func (m iotTelemetryEventMods) TimeFunc(f func() time.Time) IotTelemetryEventMod {
	return IotTelemetryEventModFunc(func(_ context.Context, o *IotTelemetryEventTemplate) {
		o.Time = f
	})
}

// Clear any values for the column
func (m iotTelemetryEventMods) UnsetTime() IotTelemetryEventMod {
	return IotTelemetryEventModFunc(func(_ context.Context, o *IotTelemetryEventTemplate) {
		o.Time = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m iotTelemetryEventMods) RandomTime(f *faker.Faker) IotTelemetryEventMod {
	return IotTelemetryEventModFunc(func(_ context.Context, o *IotTelemetryEventTemplate) {
		o.Time = func() time.Time {
			return random_time_Time(f)
		}
	})
}

// Set the model columns to this value
func (m iotTelemetryEventMods) DeviceID(val string) IotTelemetryEventMod {
	return IotTelemetryEventModFunc(func(_ context.Context, o *IotTelemetryEventTemplate) {
		o.DeviceID = func() string { return val }
	})
}

// Set the Column from the function
func (m iotTelemetryEventMods) DeviceIDFunc(f func() string) IotTelemetryEventMod {
	return IotTelemetryEventModFunc(func(_ context.Context, o *IotTelemetryEventTemplate) {
		o.DeviceID = f
	})
}

// Clear any values for the column
func (m iotTelemetryEventMods) UnsetDeviceID() IotTelemetryEventMod {
	return IotTelemetryEventModFunc(func(_ context.Context, o *IotTelemetryEventTemplate) {
		o.DeviceID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m iotTelemetryEventMods) RandomDeviceID(f *faker.Faker) IotTelemetryEventMod {
	return IotTelemetryEventModFunc(func(_ context.Context, o *IotTelemetryEventTemplate) {
		o.DeviceID = func() string {
			return random_string(f, "50")
		}
	})
}

// Set the model columns to this value
func (m iotTelemetryEventMods) TemperatureCelcius(val decimal.Decimal) IotTelemetryEventMod {
	return IotTelemetryEventModFunc(func(_ context.Context, o *IotTelemetryEventTemplate) {
		o.TemperatureCelcius = func() decimal.Decimal { return val }
	})
}

// Set the Column from the function
func (m iotTelemetryEventMods) TemperatureCelciusFunc(f func() decimal.Decimal) IotTelemetryEventMod {
	return IotTelemetryEventModFunc(func(_ context.Context, o *IotTelemetryEventTemplate) {
		o.TemperatureCelcius = f
	})
}

// Clear any values for the column
func (m iotTelemetryEventMods) UnsetTemperatureCelcius() IotTelemetryEventMod {
	return IotTelemetryEventModFunc(func(_ context.Context, o *IotTelemetryEventTemplate) {
		o.TemperatureCelcius = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m iotTelemetryEventMods) RandomTemperatureCelcius(f *faker.Faker) IotTelemetryEventMod {
	return IotTelemetryEventModFunc(func(_ context.Context, o *IotTelemetryEventTemplate) {
		o.TemperatureCelcius = func() decimal.Decimal {
			return random_decimal_Decimal(f, "5", "2")
		}
	})
}

// Set the model columns to this value
func (m iotTelemetryEventMods) HumidityPercent(val decimal.Decimal) IotTelemetryEventMod {
	return IotTelemetryEventModFunc(func(_ context.Context, o *IotTelemetryEventTemplate) {
		o.HumidityPercent = func() decimal.Decimal { return val }
	})
}

// Set the Column from the function
func (m iotTelemetryEventMods) HumidityPercentFunc(f func() decimal.Decimal) IotTelemetryEventMod {
	return IotTelemetryEventModFunc(func(_ context.Context, o *IotTelemetryEventTemplate) {
		o.HumidityPercent = f
	})
}

// Clear any values for the column
func (m iotTelemetryEventMods) UnsetHumidityPercent() IotTelemetryEventMod {
	return IotTelemetryEventModFunc(func(_ context.Context, o *IotTelemetryEventTemplate) {
		o.HumidityPercent = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m iotTelemetryEventMods) RandomHumidityPercent(f *faker.Faker) IotTelemetryEventMod {
	return IotTelemetryEventModFunc(func(_ context.Context, o *IotTelemetryEventTemplate) {
		o.HumidityPercent = func() decimal.Decimal {
			return random_decimal_Decimal(f, "5", "2")
		}
	})
}

// Set the model columns to this value
func (m iotTelemetryEventMods) VibrationHZ(val decimal.Decimal) IotTelemetryEventMod {
	return IotTelemetryEventModFunc(func(_ context.Context, o *IotTelemetryEventTemplate) {
		o.VibrationHZ = func() decimal.Decimal { return val }
	})
}

// Set the Column from the function
func (m iotTelemetryEventMods) VibrationHZFunc(f func() decimal.Decimal) IotTelemetryEventMod {
	return IotTelemetryEventModFunc(func(_ context.Context, o *IotTelemetryEventTemplate) {
		o.VibrationHZ = f
	})
}

// Clear any values for the column
func (m iotTelemetryEventMods) UnsetVibrationHZ() IotTelemetryEventMod {
	return IotTelemetryEventModFunc(func(_ context.Context, o *IotTelemetryEventTemplate) {
		o.VibrationHZ = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m iotTelemetryEventMods) RandomVibrationHZ(f *faker.Faker) IotTelemetryEventMod {
	return IotTelemetryEventModFunc(func(_ context.Context, o *IotTelemetryEventTemplate) {
		o.VibrationHZ = func() decimal.Decimal {
			return random_decimal_Decimal(f, "5", "2")
		}
	})
}

// Set the model columns to this value
func (m iotTelemetryEventMods) MotorRPM(val int32) IotTelemetryEventMod {
	return IotTelemetryEventModFunc(func(_ context.Context, o *IotTelemetryEventTemplate) {
		o.MotorRPM = func() int32 { return val }
	})
}

// Set the Column from the function
func (m iotTelemetryEventMods) MotorRPMFunc(f func() int32) IotTelemetryEventMod {
	return IotTelemetryEventModFunc(func(_ context.Context, o *IotTelemetryEventTemplate) {
		o.MotorRPM = f
	})
}

// Clear any values for the column
func (m iotTelemetryEventMods) UnsetMotorRPM() IotTelemetryEventMod {
	return IotTelemetryEventModFunc(func(_ context.Context, o *IotTelemetryEventTemplate) {
		o.MotorRPM = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m iotTelemetryEventMods) RandomMotorRPM(f *faker.Faker) IotTelemetryEventMod {
	return IotTelemetryEventModFunc(func(_ context.Context, o *IotTelemetryEventTemplate) {
		o.MotorRPM = func() int32 {
			return random_int32(f)
		}
	})
}

// Set the model columns to this value
func (m iotTelemetryEventMods) CurrentAmps(val decimal.Decimal) IotTelemetryEventMod {
	return IotTelemetryEventModFunc(func(_ context.Context, o *IotTelemetryEventTemplate) {
		o.CurrentAmps = func() decimal.Decimal { return val }
	})
}

// Set the Column from the function
func (m iotTelemetryEventMods) CurrentAmpsFunc(f func() decimal.Decimal) IotTelemetryEventMod {
	return IotTelemetryEventModFunc(func(_ context.Context, o *IotTelemetryEventTemplate) {
		o.CurrentAmps = f
	})
}

// Clear any values for the column
func (m iotTelemetryEventMods) UnsetCurrentAmps() IotTelemetryEventMod {
	return IotTelemetryEventModFunc(func(_ context.Context, o *IotTelemetryEventTemplate) {
		o.CurrentAmps = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m iotTelemetryEventMods) RandomCurrentAmps(f *faker.Faker) IotTelemetryEventMod {
	return IotTelemetryEventModFunc(func(_ context.Context, o *IotTelemetryEventTemplate) {
		o.CurrentAmps = func() decimal.Decimal {
			return random_decimal_Decimal(f, "5", "2")
		}
	})
}

// Set the model columns to this value
func (m iotTelemetryEventMods) MachineStatus(val string) IotTelemetryEventMod {
	return IotTelemetryEventModFunc(func(_ context.Context, o *IotTelemetryEventTemplate) {
		o.MachineStatus = func() string { return val }
	})
}

// Set the Column from the function
func (m iotTelemetryEventMods) MachineStatusFunc(f func() string) IotTelemetryEventMod {
	return IotTelemetryEventModFunc(func(_ context.Context, o *IotTelemetryEventTemplate) {
		o.MachineStatus = f
	})
}

// Clear any values for the column
func (m iotTelemetryEventMods) UnsetMachineStatus() IotTelemetryEventMod {
	return IotTelemetryEventModFunc(func(_ context.Context, o *IotTelemetryEventTemplate) {
		o.MachineStatus = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m iotTelemetryEventMods) RandomMachineStatus(f *faker.Faker) IotTelemetryEventMod {
	return IotTelemetryEventModFunc(func(_ context.Context, o *IotTelemetryEventTemplate) {
		o.MachineStatus = func() string {
			return random_string(f, "20")
		}
	})
}

// Set the model columns to this value
func (m iotTelemetryEventMods) ErrorCode(val null.Val[string]) IotTelemetryEventMod {
	return IotTelemetryEventModFunc(func(_ context.Context, o *IotTelemetryEventTemplate) {
		o.ErrorCode = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m iotTelemetryEventMods) ErrorCodeFunc(f func() null.Val[string]) IotTelemetryEventMod {
	return IotTelemetryEventModFunc(func(_ context.Context, o *IotTelemetryEventTemplate) {
		o.ErrorCode = f
	})
}

// Clear any values for the column
func (m iotTelemetryEventMods) UnsetErrorCode() IotTelemetryEventMod {
	return IotTelemetryEventModFunc(func(_ context.Context, o *IotTelemetryEventTemplate) {
		o.ErrorCode = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m iotTelemetryEventMods) RandomErrorCode(f *faker.Faker) IotTelemetryEventMod {
	return IotTelemetryEventModFunc(func(_ context.Context, o *IotTelemetryEventTemplate) {
		o.ErrorCode = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f, "50")
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m iotTelemetryEventMods) RandomErrorCodeNotNull(f *faker.Faker) IotTelemetryEventMod {
	return IotTelemetryEventModFunc(func(_ context.Context, o *IotTelemetryEventTemplate) {
		o.ErrorCode = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f, "50")
			return null.From(val)
		}
	})
}

func (m iotTelemetryEventMods) WithParentsCascading() IotTelemetryEventMod {
	return IotTelemetryEventModFunc(func(ctx context.Context, o *IotTelemetryEventTemplate) {
		if isDone, _ := iotTelemetryEventWithParentsCascadingCtx.Value(ctx); isDone {
			return
		}
		ctx = iotTelemetryEventWithParentsCascadingCtx.WithValue(ctx, true)
	})
}
