// Code generated by BobGen psql v0.41.1. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dbinfo

import "github.com/aarondl/opt/null"

var IotProductionEvents = Table[
	iotProductionEventColumns,
	iotProductionEventIndexes,
	iotProductionEventForeignKeys,
	iotProductionEventUniques,
	iotProductionEventChecks,
]{
	Schema: "",
	Name:   "iot_production_events",
	Columns: iotProductionEventColumns{
		Time: column{
			Name:      "time",
			DBType:    "timestamp with time zone",
			Default:   "",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
		DeviceID: column{
			Name:      "device_id",
			DBType:    "character varying",
			Default:   "",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
		ProductionType: column{
			Name:      "production_type",
			DBType:    "character varying",
			Default:   "",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
		ProductSku: column{
			Name:      "product_sku",
			DBType:    "character varying",
			Default:   "",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
		UnitCount: column{
			Name:      "unit_count",
			DBType:    "integer",
			Default:   "",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
		BatchID: column{
			Name:      "batch_id",
			DBType:    "character varying",
			Default:   "",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
		QualityStatus: column{
			Name:      "quality_status",
			DBType:    "character varying",
			Default:   "",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
	},
	Indexes: iotProductionEventIndexes{
		IotProductionEventsTimeIdx: index{
			Type: "btree",
			Name: "iot_production_events_time_idx",
			Columns: []indexColumn{
				{
					Name:         "\"time\"",
					Desc:         null.FromCond(true, true),
					IsExpression: true,
				},
			},
			Unique:        false,
			Comment:       "",
			NullsFirst:    []bool{true},
			NullsDistinct: false,
			Where:         "",
			Include:       []string{},
		},
	},

	Comment: "",
}

type iotProductionEventColumns struct {
	Time           column
	DeviceID       column
	ProductionType column
	ProductSku     column
	UnitCount      column
	BatchID        column
	QualityStatus  column
}

func (c iotProductionEventColumns) AsSlice() []column {
	return []column{
		c.Time, c.DeviceID, c.ProductionType, c.ProductSku, c.UnitCount, c.BatchID, c.QualityStatus,
	}
}

type iotProductionEventIndexes struct {
	IotProductionEventsTimeIdx index
}

func (i iotProductionEventIndexes) AsSlice() []index {
	return []index{
		i.IotProductionEventsTimeIdx,
	}
}

type iotProductionEventForeignKeys struct{}

func (f iotProductionEventForeignKeys) AsSlice() []foreignKey {
	return []foreignKey{}
}

type iotProductionEventUniques struct{}

func (u iotProductionEventUniques) AsSlice() []constraint {
	return []constraint{}
}

type iotProductionEventChecks struct{}

func (c iotProductionEventChecks) AsSlice() []check {
	return []check{}
}
