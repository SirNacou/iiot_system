// Code generated by BobGen psql v0.41.1. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"time"

	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/psql"
	"github.com/stephenafamo/bob/expr"
)

// IotStatusEvent is an object representing the database table.
type IotStatusEvent struct {
	Time      time.Time `db:"time" `
	DeviceID  string    `db:"device_id" `
	OldStatus string    `db:"old_status" `
	NewStatus string    `db:"new_status" `
	Reason    string    `db:"reason" `
}

// IotStatusEventSlice is an alias for a slice of pointers to IotStatusEvent.
// This should almost always be used instead of []*IotStatusEvent.
type IotStatusEventSlice []*IotStatusEvent

// IotStatusEvents contains methods to work with the iot_status_events view
var IotStatusEvents = psql.NewViewx[*IotStatusEvent, IotStatusEventSlice]("", "iot_status_events", buildIotStatusEventColumns("iot_status_events"))

// IotStatusEventsQuery is a query on the iot_status_events view
type IotStatusEventsQuery = *psql.ViewQuery[*IotStatusEvent, IotStatusEventSlice]

func buildIotStatusEventColumns(alias string) iotStatusEventColumns {
	return iotStatusEventColumns{
		ColumnsExpr: expr.NewColumnsExpr(
			"time", "device_id", "old_status", "new_status", "reason",
		).WithParent("iot_status_events"),
		tableAlias: alias,
		Time:       psql.Quote(alias, "time"),
		DeviceID:   psql.Quote(alias, "device_id"),
		OldStatus:  psql.Quote(alias, "old_status"),
		NewStatus:  psql.Quote(alias, "new_status"),
		Reason:     psql.Quote(alias, "reason"),
	}
}

type iotStatusEventColumns struct {
	expr.ColumnsExpr
	tableAlias string
	Time       psql.Expression
	DeviceID   psql.Expression
	OldStatus  psql.Expression
	NewStatus  psql.Expression
	Reason     psql.Expression
}

func (c iotStatusEventColumns) Alias() string {
	return c.tableAlias
}

func (iotStatusEventColumns) AliasedAs(alias string) iotStatusEventColumns {
	return buildIotStatusEventColumns(alias)
}

// AfterQueryHook is called after IotStatusEvent is retrieved from the database
func (o *IotStatusEvent) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = IotStatusEvents.AfterSelectHooks.RunHooks(ctx, exec, IotStatusEventSlice{o})
	}

	return err
}

// AfterQueryHook is called after IotStatusEventSlice is retrieved from the database
func (o IotStatusEventSlice) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = IotStatusEvents.AfterSelectHooks.RunHooks(ctx, exec, o)
	}

	return err
}

type iotStatusEventWhere[Q psql.Filterable] struct {
	Time      psql.WhereMod[Q, time.Time]
	DeviceID  psql.WhereMod[Q, string]
	OldStatus psql.WhereMod[Q, string]
	NewStatus psql.WhereMod[Q, string]
	Reason    psql.WhereMod[Q, string]
}

func (iotStatusEventWhere[Q]) AliasedAs(alias string) iotStatusEventWhere[Q] {
	return buildIotStatusEventWhere[Q](buildIotStatusEventColumns(alias))
}

func buildIotStatusEventWhere[Q psql.Filterable](cols iotStatusEventColumns) iotStatusEventWhere[Q] {
	return iotStatusEventWhere[Q]{
		Time:      psql.Where[Q, time.Time](cols.Time),
		DeviceID:  psql.Where[Q, string](cols.DeviceID),
		OldStatus: psql.Where[Q, string](cols.OldStatus),
		NewStatus: psql.Where[Q, string](cols.NewStatus),
		Reason:    psql.Where[Q, string](cols.Reason),
	}
}
