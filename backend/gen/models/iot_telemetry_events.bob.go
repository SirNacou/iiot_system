// Code generated by BobGen psql v0.41.1. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"time"

	"github.com/aarondl/opt/null"
	"github.com/shopspring/decimal"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/psql"
	"github.com/stephenafamo/bob/expr"
)

// IotTelemetryEvent is an object representing the database table.
type IotTelemetryEvent struct {
	Time               time.Time        `db:"time" `
	DeviceID           string           `db:"device_id" `
	TemperatureCelcius decimal.Decimal  `db:"temperature_celcius" `
	HumidityPercent    decimal.Decimal  `db:"humidity_percent" `
	VibrationHZ        decimal.Decimal  `db:"vibration_hz" `
	MotorRPM           int32            `db:"motor_rpm" `
	CurrentAmps        decimal.Decimal  `db:"current_amps" `
	MachineStatus      string           `db:"machine_status" `
	ErrorCode          null.Val[string] `db:"error_code" `
}

// IotTelemetryEventSlice is an alias for a slice of pointers to IotTelemetryEvent.
// This should almost always be used instead of []*IotTelemetryEvent.
type IotTelemetryEventSlice []*IotTelemetryEvent

// IotTelemetryEvents contains methods to work with the iot_telemetry_events view
var IotTelemetryEvents = psql.NewViewx[*IotTelemetryEvent, IotTelemetryEventSlice]("", "iot_telemetry_events", buildIotTelemetryEventColumns("iot_telemetry_events"))

// IotTelemetryEventsQuery is a query on the iot_telemetry_events view
type IotTelemetryEventsQuery = *psql.ViewQuery[*IotTelemetryEvent, IotTelemetryEventSlice]

func buildIotTelemetryEventColumns(alias string) iotTelemetryEventColumns {
	return iotTelemetryEventColumns{
		ColumnsExpr: expr.NewColumnsExpr(
			"time", "device_id", "temperature_celcius", "humidity_percent", "vibration_hz", "motor_rpm", "current_amps", "machine_status", "error_code",
		).WithParent("iot_telemetry_events"),
		tableAlias:         alias,
		Time:               psql.Quote(alias, "time"),
		DeviceID:           psql.Quote(alias, "device_id"),
		TemperatureCelcius: psql.Quote(alias, "temperature_celcius"),
		HumidityPercent:    psql.Quote(alias, "humidity_percent"),
		VibrationHZ:        psql.Quote(alias, "vibration_hz"),
		MotorRPM:           psql.Quote(alias, "motor_rpm"),
		CurrentAmps:        psql.Quote(alias, "current_amps"),
		MachineStatus:      psql.Quote(alias, "machine_status"),
		ErrorCode:          psql.Quote(alias, "error_code"),
	}
}

type iotTelemetryEventColumns struct {
	expr.ColumnsExpr
	tableAlias         string
	Time               psql.Expression
	DeviceID           psql.Expression
	TemperatureCelcius psql.Expression
	HumidityPercent    psql.Expression
	VibrationHZ        psql.Expression
	MotorRPM           psql.Expression
	CurrentAmps        psql.Expression
	MachineStatus      psql.Expression
	ErrorCode          psql.Expression
}

func (c iotTelemetryEventColumns) Alias() string {
	return c.tableAlias
}

func (iotTelemetryEventColumns) AliasedAs(alias string) iotTelemetryEventColumns {
	return buildIotTelemetryEventColumns(alias)
}

// AfterQueryHook is called after IotTelemetryEvent is retrieved from the database
func (o *IotTelemetryEvent) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = IotTelemetryEvents.AfterSelectHooks.RunHooks(ctx, exec, IotTelemetryEventSlice{o})
	}

	return err
}

// AfterQueryHook is called after IotTelemetryEventSlice is retrieved from the database
func (o IotTelemetryEventSlice) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = IotTelemetryEvents.AfterSelectHooks.RunHooks(ctx, exec, o)
	}

	return err
}

type iotTelemetryEventWhere[Q psql.Filterable] struct {
	Time               psql.WhereMod[Q, time.Time]
	DeviceID           psql.WhereMod[Q, string]
	TemperatureCelcius psql.WhereMod[Q, decimal.Decimal]
	HumidityPercent    psql.WhereMod[Q, decimal.Decimal]
	VibrationHZ        psql.WhereMod[Q, decimal.Decimal]
	MotorRPM           psql.WhereMod[Q, int32]
	CurrentAmps        psql.WhereMod[Q, decimal.Decimal]
	MachineStatus      psql.WhereMod[Q, string]
	ErrorCode          psql.WhereNullMod[Q, string]
}

func (iotTelemetryEventWhere[Q]) AliasedAs(alias string) iotTelemetryEventWhere[Q] {
	return buildIotTelemetryEventWhere[Q](buildIotTelemetryEventColumns(alias))
}

func buildIotTelemetryEventWhere[Q psql.Filterable](cols iotTelemetryEventColumns) iotTelemetryEventWhere[Q] {
	return iotTelemetryEventWhere[Q]{
		Time:               psql.Where[Q, time.Time](cols.Time),
		DeviceID:           psql.Where[Q, string](cols.DeviceID),
		TemperatureCelcius: psql.Where[Q, decimal.Decimal](cols.TemperatureCelcius),
		HumidityPercent:    psql.Where[Q, decimal.Decimal](cols.HumidityPercent),
		VibrationHZ:        psql.Where[Q, decimal.Decimal](cols.VibrationHZ),
		MotorRPM:           psql.Where[Q, int32](cols.MotorRPM),
		CurrentAmps:        psql.Where[Q, decimal.Decimal](cols.CurrentAmps),
		MachineStatus:      psql.Where[Q, string](cols.MachineStatus),
		ErrorCode:          psql.WhereNull[Q, string](cols.ErrorCode),
	}
}
