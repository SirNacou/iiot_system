// Code generated by BobGen psql v0.41.1. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"time"

	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/psql"
	"github.com/stephenafamo/bob/expr"
)

// IotProductionEvent is an object representing the database table.
type IotProductionEvent struct {
	Time           time.Time `db:"time" `
	DeviceID       string    `db:"device_id" `
	ProductionType string    `db:"production_type" `
	ProductSku     string    `db:"product_sku" `
	UnitCount      int32     `db:"unit_count" `
	BatchID        string    `db:"batch_id" `
	QualityStatus  string    `db:"quality_status" `
}

// IotProductionEventSlice is an alias for a slice of pointers to IotProductionEvent.
// This should almost always be used instead of []*IotProductionEvent.
type IotProductionEventSlice []*IotProductionEvent

// IotProductionEvents contains methods to work with the iot_production_events view
var IotProductionEvents = psql.NewViewx[*IotProductionEvent, IotProductionEventSlice]("", "iot_production_events", buildIotProductionEventColumns("iot_production_events"))

// IotProductionEventsQuery is a query on the iot_production_events view
type IotProductionEventsQuery = *psql.ViewQuery[*IotProductionEvent, IotProductionEventSlice]

func buildIotProductionEventColumns(alias string) iotProductionEventColumns {
	return iotProductionEventColumns{
		ColumnsExpr: expr.NewColumnsExpr(
			"time", "device_id", "production_type", "product_sku", "unit_count", "batch_id", "quality_status",
		).WithParent("iot_production_events"),
		tableAlias:     alias,
		Time:           psql.Quote(alias, "time"),
		DeviceID:       psql.Quote(alias, "device_id"),
		ProductionType: psql.Quote(alias, "production_type"),
		ProductSku:     psql.Quote(alias, "product_sku"),
		UnitCount:      psql.Quote(alias, "unit_count"),
		BatchID:        psql.Quote(alias, "batch_id"),
		QualityStatus:  psql.Quote(alias, "quality_status"),
	}
}

type iotProductionEventColumns struct {
	expr.ColumnsExpr
	tableAlias     string
	Time           psql.Expression
	DeviceID       psql.Expression
	ProductionType psql.Expression
	ProductSku     psql.Expression
	UnitCount      psql.Expression
	BatchID        psql.Expression
	QualityStatus  psql.Expression
}

func (c iotProductionEventColumns) Alias() string {
	return c.tableAlias
}

func (iotProductionEventColumns) AliasedAs(alias string) iotProductionEventColumns {
	return buildIotProductionEventColumns(alias)
}

// AfterQueryHook is called after IotProductionEvent is retrieved from the database
func (o *IotProductionEvent) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = IotProductionEvents.AfterSelectHooks.RunHooks(ctx, exec, IotProductionEventSlice{o})
	}

	return err
}

// AfterQueryHook is called after IotProductionEventSlice is retrieved from the database
func (o IotProductionEventSlice) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = IotProductionEvents.AfterSelectHooks.RunHooks(ctx, exec, o)
	}

	return err
}

type iotProductionEventWhere[Q psql.Filterable] struct {
	Time           psql.WhereMod[Q, time.Time]
	DeviceID       psql.WhereMod[Q, string]
	ProductionType psql.WhereMod[Q, string]
	ProductSku     psql.WhereMod[Q, string]
	UnitCount      psql.WhereMod[Q, int32]
	BatchID        psql.WhereMod[Q, string]
	QualityStatus  psql.WhereMod[Q, string]
}

func (iotProductionEventWhere[Q]) AliasedAs(alias string) iotProductionEventWhere[Q] {
	return buildIotProductionEventWhere[Q](buildIotProductionEventColumns(alias))
}

func buildIotProductionEventWhere[Q psql.Filterable](cols iotProductionEventColumns) iotProductionEventWhere[Q] {
	return iotProductionEventWhere[Q]{
		Time:           psql.Where[Q, time.Time](cols.Time),
		DeviceID:       psql.Where[Q, string](cols.DeviceID),
		ProductionType: psql.Where[Q, string](cols.ProductionType),
		ProductSku:     psql.Where[Q, string](cols.ProductSku),
		UnitCount:      psql.Where[Q, int32](cols.UnitCount),
		BatchID:        psql.Where[Q, string](cols.BatchID),
		QualityStatus:  psql.Where[Q, string](cols.QualityStatus),
	}
}
