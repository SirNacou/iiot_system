// Code generated by BobGen psql v0.38.0. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"time"

	"github.com/shopspring/decimal"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/psql"
)

// IotAlertEvent is an object representing the database table.
type IotAlertEvent struct {
	Time         time.Time                 `db:"time" `
	DeviceID     string                    `db:"device_id" `
	AlertType    string                    `db:"alert_type" `
	Severity     string                    `db:"severity" `
	Message      string                    `db:"message" `
	CurrentValue sql.Null[decimal.Decimal] `db:"current_value" `
}

// IotAlertEventSlice is an alias for a slice of pointers to IotAlertEvent.
// This should almost always be used instead of []*IotAlertEvent.
type IotAlertEventSlice []*IotAlertEvent

// IotAlertEvents contains methods to work with the iot_alert_events view
var IotAlertEvents = psql.NewViewx[*IotAlertEvent, IotAlertEventSlice]("", "iot_alert_events")

// IotAlertEventsQuery is a query on the iot_alert_events view
type IotAlertEventsQuery = *psql.ViewQuery[*IotAlertEvent, IotAlertEventSlice]

type iotAlertEventColumnNames struct {
	Time         string
	DeviceID     string
	AlertType    string
	Severity     string
	Message      string
	CurrentValue string
}

var IotAlertEventColumns = buildIotAlertEventColumns("iot_alert_events")

type iotAlertEventColumns struct {
	tableAlias   string
	Time         psql.Expression
	DeviceID     psql.Expression
	AlertType    psql.Expression
	Severity     psql.Expression
	Message      psql.Expression
	CurrentValue psql.Expression
}

func (c iotAlertEventColumns) Alias() string {
	return c.tableAlias
}

func (iotAlertEventColumns) AliasedAs(alias string) iotAlertEventColumns {
	return buildIotAlertEventColumns(alias)
}

func buildIotAlertEventColumns(alias string) iotAlertEventColumns {
	return iotAlertEventColumns{
		tableAlias:   alias,
		Time:         psql.Quote(alias, "time"),
		DeviceID:     psql.Quote(alias, "device_id"),
		AlertType:    psql.Quote(alias, "alert_type"),
		Severity:     psql.Quote(alias, "severity"),
		Message:      psql.Quote(alias, "message"),
		CurrentValue: psql.Quote(alias, "current_value"),
	}
}

type iotAlertEventWhere[Q psql.Filterable] struct {
	Time         psql.WhereMod[Q, time.Time]
	DeviceID     psql.WhereMod[Q, string]
	AlertType    psql.WhereMod[Q, string]
	Severity     psql.WhereMod[Q, string]
	Message      psql.WhereMod[Q, string]
	CurrentValue psql.WhereNullMod[Q, decimal.Decimal]
}

func (iotAlertEventWhere[Q]) AliasedAs(alias string) iotAlertEventWhere[Q] {
	return buildIotAlertEventWhere[Q](buildIotAlertEventColumns(alias))
}

func buildIotAlertEventWhere[Q psql.Filterable](cols iotAlertEventColumns) iotAlertEventWhere[Q] {
	return iotAlertEventWhere[Q]{
		Time:         psql.Where[Q, time.Time](cols.Time),
		DeviceID:     psql.Where[Q, string](cols.DeviceID),
		AlertType:    psql.Where[Q, string](cols.AlertType),
		Severity:     psql.Where[Q, string](cols.Severity),
		Message:      psql.Where[Q, string](cols.Message),
		CurrentValue: psql.WhereNull[Q, decimal.Decimal](cols.CurrentValue),
	}
}

// AfterQueryHook is called after IotAlertEvent is retrieved from the database
func (o *IotAlertEvent) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = IotAlertEvents.AfterSelectHooks.RunHooks(ctx, exec, IotAlertEventSlice{o})
	}

	return err
}

// AfterQueryHook is called after IotAlertEventSlice is retrieved from the database
func (o IotAlertEventSlice) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = IotAlertEvents.AfterSelectHooks.RunHooks(ctx, exec, o)
	}

	return err
}
